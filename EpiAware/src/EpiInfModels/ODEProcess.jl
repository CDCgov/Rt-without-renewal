@doc raw"""
A structure representing an infection process modeled by an Ordinary Differential Equation (ODE).
At a high level, an `ODEProcess` struct object combines:

- An `AbstractTuringParamModel` which defines the ODE model in terms of `OrdinaryDiffEq` types,
     the parameters of the ODE model and a method to generate the parameters.
- A technique for solving and interpreting the ODE model using the `SciML` ecosystem. This includes
    the solver used in the ODE solution, keyword arguments to send to the solver and a function
    to map the `ODESolution` solution object to latent infections.

# Constructors
- `ODEProcess(prob::ODEProblem; ts, solver, sol2infs)`: Create an `ODEProcess`
object with the ODE problem `prob`, time points `ts`, solver `solver`, and function `sol2infs`.

# Predefined ODE models
Two basic ODE models are provided in the `EpiAware` package: `SIRParams` and `SEIRParams`.
In both cases these are defined in terms of the proportions of the population in each compartment
of the SIR and SEIR models respectively.

## SIR model

```math
\begin{aligned}
\frac{dS}{dt} &= -\beta SI \\
\frac{dI}{dt} &= \beta SI - \gamma I \\
\frac{dR}{dt} &= \gamma I
\end{aligned}
```
Where `S` is the proportion of the population that is susceptible, `I` is the proportion of the
population that is infected and `R` is the proportion of the population that is recovered. The
parameters are the infectiousness `β` and the recovery rate `γ`.

```julia
using EpiAware, OrdinaryDiffEq, Distributions
# Define the time span for the ODE problem
tspan = (0.0, 30.0)
# Define prior distributions
infectiousness_prior = LogNormal(log(0.3), 0.05)
recovery_rate_prior = LogNormal(log(0.1), 0.05)
initial_prop_infected_prior = Beta(1, 99)

# Create an instance of SIRParams
sirparams = SIRParams(
    tspan = tspan,
    infectiousness_prior = infectiousness_prior,
    recovery_rate_prior = recovery_rate_prior,
    initial_prop_infected_prior = initial_prop_infected_prior
)
```

## SEIR model

```math
\begin{aligned}
\frac{dS}{dt} &= -\beta SI \\
\frac{dE}{dt} &= \beta SI - \alpha E \\
\frac{dI}{dt} &= \alpha E - \gamma I \\
\frac{dR}{dt} &= \gamma I
\end{aligned}
```
Where `S` is the proportion of the population that is susceptible, `E` is the proportion of the
population that is exposed, `I` is the proportion of the population that is infected and `R` is
the proportion of the population that is recovered. The parameters are the infectiousness `β`,
the incubation rate `α` and the recovery rate `γ`.

```julia
using EpiAware, OrdinaryDiffEq, Distributions
# Define the time span for the ODE problem
tspan = (0.0, 30.0)

# Define prior distributions
infectiousness_prior = LogNormal(log(0.3), 0.05)
incubation_rate_prior = LogNormal(log(0.1), 0.05)
recovery_rate_prior = LogNormal(log(0.1), 0.05)
initial_prop_infected_prior = Beta(1, 99)

# Create an instance of SIRParams
seirparams = SEIRParams(
    tspan = tspan,
    infectiousness_prior = infectiousness_prior,
    incubation_rate_prior = incubation_rate_prior,
    recovery_rate_prior = recovery_rate_prior,
    initial_prop_infected_prior = initial_prop_infected_prior
)
```

# Usage Example with `ODEProcess` and predefined SIR model

These
are defined in terms of the proportions of the population in each compartment of the SEIR model



# Example

"""
@kwdef struct ODEProcess{
    P <: AbstractTuringParamModel, S, F <: Function, D <:
                                                     Union{Dict, NamedTuple}} <:
              EpiAwareBase.AbstractTuringEpiModel
    "The ODE problem instance, where `P` is a subtype of `ODEProblem`."
    params::P
    "The solver used for the ODE problem. Default is `AutoVern7(Rodas5())`, which is an auto
    switching solver aimed at medium/low tolerances."
    solver::S = AutoVern7(Rodas5())
    "A function that maps the solution object of the ODE to infection counts."
    sol2infs::F
    "The extra solver options for the ODE problem. Can be either a `Dict` or a `NamedTuple`
    containing the solver options."
    solver_options::D = Dict(:verbose => false, :saveat => 1.0)
end

@doc raw"""
Implement the `generate_latent_infs` function for the `ODEProcess` model.

Constructs a `Turing` model to generate latent infections using the specified epidemiological
model and parameters.

# Arguments
- `epi_model::ODEProcess`: The `ODEProcess` model containing the problem definition, time steps,
    solver, and solution-to-infections transformation function.
- `params::ODEParams`: The initial conditions (`u0`) and parameters (`p`) for the ODE problem.

# Generated quantities
- `I_t`: The latent infections generated by solving the ODE problem with the specified parameters.

# Details
This function remakes the ODE problem with the provided initial conditions and parameters,
    solves it using the specified solver, and then transforms the solution into latent infections
    using the `sol2infs` function.

# Example usage

```julia
using EpiAware, OrdinaryDiffEq
r = log(2) / 7 # Growth rate corresponding to 7 day doubling time
u0 = [1.0]
p = [r]
params = ODEParams(u0 = u0, p = p)

# Define the ODE problem using SciML
# We use a simple exponential growth model

function expgrowth(du, u, p, t)
    du[1] = p[1] * u[1]
end
prob = ODEProblem(expgrowth, u0, (0.0, 10.0), p)

# Define the ODEProcess

expgrowth_model = ODEProcess(prob::ODEProblem; ts = 0:1:10,
        solver = Tsit5(),
        sol2infs = sol -> sol[1, :])

# Generate the latent infections
I_t = generate_latent_infs(expgrowth_model, params)()
```
"""
@model function EpiAwareBase.generate_latent_infs(epi_model::ODEProcess, Z_t)
    prob, solver, sol2infs, solver_options = epi_model.params.prob,
    epi_model.solver, epi_model.sol2infs, epi_model.solver_options

    @submodel prefix="params" u0, p=generate_parameters(epi_model.params, Z_t)

    _prob = remake(prob; u0 = u0, p = p)
    sol = solve(_prob, solver; solver_options...)
    I_t = sol2infs(sol)

    return I_t
end
