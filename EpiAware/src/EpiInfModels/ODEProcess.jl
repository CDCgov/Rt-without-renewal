"""
A structure to hold the initial condition and parameters for an ODE (Ordinary Differential Equation) process.
`params::ODEParams` is used in the method `generate_latent_infs(epi_model::ODEProcess, params::ODEParams)`

# Constructors
- `ODEParams(; u0::VecOrMat, p::VecOrMat)`: Create an `ODEParams` object with the initial condition(s) `u0` and parameters `p`.

# Fields
- `u0::VecOrMat{T}`: The initial condition(s) for the ODE, which can be a vector or matrix of type `T`.
- `p::VecOrMat{T}`: The parameters for the ODE, which can be a vector or matrix of type `T`.

# Type Parameters
- `T`: The type of the elements in `u0` and `p`.

# Example
```jldoctest
using EpiAware
params = ODEParams(; u0 = ones(10), p = [2, 3])

# output

ODEParams{Float64}([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], [2.0, 3.0])
```
"""
struct ODEParams{T}
    u0::VecOrMat{T}
    p::VecOrMat{T}
end

function ODEParams(; u0::VecOrMat, p::VecOrMat)
    T = promote_type(eltype(u0), eltype(p))
    return ODEParams{T}(T.(u0), T.(p))
end

"""
A structure representing an infection process modeled by an Ordinary Differential Equation (ODE).

# Background

The purpose of this structure is to define the behaviour of modelling an infection process
using an ODE. We use the [`SciML` ecosystem](https://sciml.ai/) to define and solve the ODE.
For `ODEProcess` structs we focus on defining from a restricted set of ODE problems:
- The initial condition `u0` must be a vector or matrix.
- The parameters `p` must be a vector or matrix.
- The output of the ODE should be interpreted as the infection incidence at each time point in
`ts` via the function `sol2infs` which maps the solution object `sol` of the ODE solve to infection counts.

# Fields
- `prob::P`: The ODE problem instance, where `P` is a subtype of `ODEProblem`.
- `ts::Vector{T}`: A vector of time points, where `T` is the type of the time points.
- `solver::S`: The solver used for the ODE problem.
- `sol2infs::F`: A function that maps the solution object of the ODE to infection counts.

# Constructors
- `ODEProcess(prob::ODEProblem; ts, solver, sol2infs)`: Create an `ODEProcess`
object with the ODE problem `prob`, time points `ts`, solver `solver`, and function `sol2infs`.

# Type Parameters
- `P`: The type of the ODE problem, which must be a subtype of `ODEProblem`.
- `T`: The type of the time points.
- `S`: The type of the solver.
- `F`: The type of the function that maps the solution to infection counts, which must be a subtype of `Function`.

# Example

```jldoctest
using EpiAware, OrdinaryDiffEq
r = log(2) / 7 # Growth rate corresponding to 7 day doubling time
u0 = [1.0]
p = [r]
params = ODEParams(u0 = u0, p = p)

# Define the ODE problem using SciML
# We use a simple exponential growth model

function expgrowth(du, u, p, t)
    du[1] = p[1] * u[1]
end
prob = ODEProblem(expgrowth, u0, (0.0, 10.0), p)

# Define the ODEProcess

expgrowth_model = ODEProcess(prob::ODEProblem; ts = 0:1:10,
        solver = Tsit5(),
        sol2infs = sol -> sol[1, :])

# Generate the latent infections
I_t = generate_latent_infs(expgrowth_model, params)()

# output

11-element Vector{Float64}:
 1.0
 1.1040895124087677
 1.2190137467993492
 1.3459001375697022
 1.4859941865014936
 1.640671113705054
 1.8114471151863056
 1.9999990356297939
 2.2081789476865237
 2.438027196361022
 2.6918002758361723
```
"""
struct ODEProcess{P, T, S, F} <: EpiAwareBase.AbstractTuringEpiModel where {
    P <: ODEProblem,
    T,
    S,
    F <: Function}
    prob::P
    ts::Vector{T}
    solver::S
    sol2infs::F
end

function ODEProcess(prob::ODEProblem; ts,
        solver = AutoTsit5(Rosenbrock23()),
        sol2infs = sol -> sol[end, :])
    P = typeof(prob)
    T = eltype(ts)
    S = typeof(solver)
    F = typeof(sol2infs)
    return ODEProcess{P, T, S, F}(prob, ts, solver, sol2infs)
end

"""
Implement the `generate_latent_infs` function for the `ODEProcess` model.

Constructs a `Turing` model to generate latent infections using the specified epidemiological
model and parameters.

# Arguments
- `epi_model::ODEProcess`: The `ODEProcess` model containing the problem definition, time steps, solver, and solution-to-infections transformation function.
- `params::ODEParams`: The initial conditions (`u0`) and parameters (`p`) for the ODE problem.

# Generated quantities
- `I_t`: The latent infections generated by solving the ODE problem with the specified parameters.

# Details
This function remakes the ODE problem with the provided initial conditions and parameters, solves it using the specified solver, and then transforms the solution into latent infections using the `sol2infs` function.

# Example usage

```julia
using EpiAware, OrdinaryDiffEq
r = log(2) / 7 # Growth rate corresponding to 7 day doubling time
u0 = [1.0]
p = [r]
params = ODEParams(u0 = u0, p = p)

# Define the ODE problem using SciML
# We use a simple exponential growth model

function expgrowth(du, u, p, t)
    du[1] = p[1] * u[1]
end
prob = ODEProblem(expgrowth, u0, (0.0, 10.0), p)

# Define the ODEProcess

expgrowth_model = ODEProcess(prob::ODEProblem; ts = 0:1:10,
        solver = Tsit5(),
        sol2infs = sol -> sol[1, :])

# Generate the latent infections
I_t = generate_latent_infs(expgrowth_model, params)()
```
"""
@model function EpiAwareBase.generate_latent_infs(
        epi_model::ODEProcess, params::ODEParams)
    prob, ts,
    solver, sol2infs = epi_model.prob, epi_model.ts, epi_model.solver,
    epi_model.sol2infs
    u0, p = params.u0, params.p

    _prob = remake(prob; u0 = u0, p = p)
    sol = solve(_prob, solver; saveat = ts, verbose = false)
    I_t = sol2infs(sol)

    return I_t
end
