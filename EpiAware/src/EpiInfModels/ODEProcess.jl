@doc raw"""
A structure representing an infection process modeled by an Ordinary Differential Equation (ODE).

# Background

The purpose of this structure is to define the behaviour of modelling an infection process
using an ODE. We use the [`SciML` ecosystem](https://sciml.ai/) to define and solve the ODE.
For `ODEProcess` structs we focus on defining from a restricted set of ODE problems:
- The initial condition `u0` must be a vector or matrix.
- The parameters `p` must be a vector or matrix.
- The output of the ODE should be interpreted as the infection incidence at each time point in
`ts` via the function `sol2infs` which maps the solution object `sol` of the ODE solve to infection counts.

# Constructors
- `ODEProcess(prob::ODEProblem; ts, solver, sol2infs)`: Create an `ODEProcess`
object with the ODE problem `prob`, time points `ts`, solver `solver`, and function `sol2infs`.

# Example

"""
@kwdef struct ODEProcess{P <: AbstractTuringParamModel, T, S, F <: Function} <:
              EpiAwareBase.AbstractTuringEpiModel
    "The ODE problem instance, where `P` is a subtype of `ODEProblem`."
    params::P
    "A vector of time points, where `T` is the type of the time points."
    ts::Vector{T}
    "The solver used for the ODE problem. Default is `AutoVern7(Rodas5())`, which is an auto
    switching solver aimed at medium/low tolerances."
    solver::S = AutoVern7(Rodas5())
    "A function that maps the solution object of the ODE to infection counts."
    sol2infs::F
    "The extra solver options for the ODE problem. NB: `ts` is used as the `saveat` option."
    solver_options::Dict{Symbol, Any} = Dict(:verbose => false)
end

@doc raw"""
Implement the `generate_latent_infs` function for the `ODEProcess` model.

Constructs a `Turing` model to generate latent infections using the specified epidemiological
model and parameters.

# Arguments
- `epi_model::ODEProcess`: The `ODEProcess` model containing the problem definition, time steps,
    solver, and solution-to-infections transformation function.
- `params::ODEParams`: The initial conditions (`u0`) and parameters (`p`) for the ODE problem.

# Generated quantities
- `I_t`: The latent infections generated by solving the ODE problem with the specified parameters.

# Details
This function remakes the ODE problem with the provided initial conditions and parameters,
    solves it using the specified solver, and then transforms the solution into latent infections
    using the `sol2infs` function.

# Example usage

```julia
using EpiAware, OrdinaryDiffEq
r = log(2) / 7 # Growth rate corresponding to 7 day doubling time
u0 = [1.0]
p = [r]
params = ODEParams(u0 = u0, p = p)

# Define the ODE problem using SciML
# We use a simple exponential growth model

function expgrowth(du, u, p, t)
    du[1] = p[1] * u[1]
end
prob = ODEProblem(expgrowth, u0, (0.0, 10.0), p)

# Define the ODEProcess

expgrowth_model = ODEProcess(prob::ODEProblem; ts = 0:1:10,
        solver = Tsit5(),
        sol2infs = sol -> sol[1, :])

# Generate the latent infections
I_t = generate_latent_infs(expgrowth_model, params)()
```
"""
@model function EpiAwareBase.generate_latent_infs(epi_model::ODEProcess, Z_t)
    prob, ts, solver, sol2infs, solver_options = epi_model.params.prob,
    epi_model.ts, epi_model.solver, epi_model.sol2infs, epi_model.solver_options

    @submodel prefix="params" u0, p=generate_parameters(epi_model.params, Z_t)

    _prob = remake(prob; u0 = u0, p = p)
    sol = solve(_prob, solver; saveat = ts, solver_options...)
    I_t = sol2infs(sol)

    return I_t
end
