@doc raw"
Model unobserved/latent infections as due to time-varying Renewal model with reproduction
number ``\mathcal{R}_t`` which is generated by a latent process.

## Mathematical specification

If ``Z_t`` is a realisation of the latent model, then the unobserved/latent infections are
given by

```math
\begin{align}
\mathcal{R}_t &= g(Z_t),\\
I_t &= \mathcal{R}_t \sum_{i=1}^{n-1} I_{t-i} g_i, \qquad t \geq 1, \\
I_t &= g(\hat{I}_0) \exp(r(\mathcal{R}_1) t), \qquad t \leq 0.
\end{align}
```

where ``g`` is a transformation function and the unconstrained initial infections
``\hat{I}_0`` are sampled from a prior distribution. The discrete generation interval is
given by ``g_i``.

``r(\mathcal{R}_1)`` is the exponential growth rate implied by ``\mathcal{R}_1)``
using the implicit relationship between the exponential growth rate and the reproduction
number.

```math
\mathcal{R} \sum_{j \geq 1} g_j \exp(- r j)= 1.
```

`Renewal` are constructed by passing an `EpiData` object `data` and an
`initialisation_prior` for the prior distribution of ``\hat{I}_0``. The default
`initialisation_prior` is `Normal()`.

## Constructors

- `Renewal(; data, initialisation_prior)`. Construct a `Renewal` model with default update steps.
- `Renewal(data; initialisation_prior)`. Construct a `Renewal` model with default update steps.
- `Renewal(data, initialisation_prior, renewal_step)` Construct a `Renewal` model with `renewal_step` update step function.

## Example usage with `generate_latent_infs`

`generate_latent_infs` can be used to construct a `Turing` model for the latent infections
conditional on the sample path of a latent process. In this example, we generate a sample
of a white noise latent process.

First, we construct an `Renewal` struct with an `EpiData` object, an initialisation
prior and a transformation function.

```julia
using Distributions, Turing, EpiAware
gen_int = [0.2, 0.3, 0.5]
g = exp

# Create an EpiData object
data = EpiData(gen_int, g)

# Create an Renewal model
renewal_model = Renewal(data; initialisation_prior = Normal())
```

Then, we can use `generate_latent_infs` to construct a Turing model for the unobserved
infection generation model set by the type of `direct_inf_model`.

```julia
# Construct a Turing model
Z_t = randn(100) * 0.05
latent_inf = generate_latent_infs(renewal_model, Z_t)
```

Now we can use the `Turing` PPL API to sample underlying parameters and generate the
unobserved infections.

```julia
# Sample from the unobserved infections model

#Sample random parameters from prior
θ = rand(latent_inf)
#Get unobserved infections as a generated quantities from the model
I_t = generated_quantities(latent_inf, θ)
```
"
struct Renewal{E, S <: Sampleable, A} <:
       EpiAwareBase.AbstractTuringRenewal where {
    E <: EpiData, A <: AbstractConstantRenewalStep}
    data::E
    initialisation_prior::S
    renewal_step::A

    function Renewal(data::EpiData; initialisation_prior = Normal())
        rev_gen_int = reverse(data.gen_int)
        renewal_step = ConstantRenewalStep(rev_gen_int)
        return Renewal(data, initialisation_prior, renewal_step)
    end

    function Renewal(; data::EpiData, initialisation_prior = Normal())
        rev_gen_int = reverse(data.gen_int)
        renewal_step = ConstantRenewalStep(rev_gen_int)
        return Renewal(data, initialisation_prior, renewal_step)
    end

    function Renewal(data::E,
            initialisation_prior::S,
            renewal_step::A) where {
            E <: EpiData, S <: Sampleable, A <: AbstractConstantRenewalStep}
        return new{E, S, A}(data, initialisation_prior, renewal_step)
    end
end

"""
Create the initial state of the `Renewal` model.

# Arguments
- `epi_model::Renewal`: The Renewal model.
- `I₀`: The initial number of infected individuals.
- `Rt₀`: The initial time-varying reproduction number.

# Returns
The initial vector of infected individuals.

"""
function make_renewal_init(epi_model::Renewal, I₀, Rt₀)
    r_approx = R_to_r(Rt₀, epi_model)
    return renewal_init_state(
        epi_model.renewal_step, I₀, r_approx, epi_model.data.len_gen_int)
end

@doc raw"
Implement the `generate_latent_infs` function for the `Renewal` model.

## Example usage with `Renewal` type of model for unobserved infection process

`generate_latent_infs` can be used to construct a `Turing` model for the latent infections
conditional on the sample path of a latent process. In this example, we generate a sample
of a white noise latent process.

First, we construct an `Renewal` struct with an `EpiData` object, an initialisation
prior and a transformation function.

```julia
using Distributions, Turing, EpiAware
gen_int = [0.2, 0.3, 0.5]
g = exp

# Create an EpiData object
data = EpiData(gen_int, g)

# Create an Renewal model
renewal_model = Renewal(data; initialisation_prior = Normal())
```

Then, we can use `generate_latent_infs` to construct a Turing model for the unobserved
infection generation model set by the type of `renewal_model`.

```julia
# Construct a Turing model
Z_t = randn(100) * 0.05
latent_inf = generate_latent_infs(renewal_model, Z_t)
```

Now we can use the `Turing` PPL API to sample underlying parameters and generate the
unobserved infections.

```julia
# Sample from the unobserved infections model

#Sample random parameters from prior
θ = rand(latent_inf)
#Get unobserved infections as a generated quantities from the model
I_t = generated_quantities(latent_inf, θ)
```
"
@model function EpiAwareBase.generate_latent_infs(
        epi_model::EpiAwareBase.AbstractTuringRenewal, _Rt)
    init_incidence ~ epi_model.initialisation_prior
    I₀ = epi_model.data.transformation(init_incidence)
    Rt = epi_model.data.transformation.(_Rt)

    init = make_renewal_init(epi_model, I₀, Rt[1])
    I_t = accumulate_scan(epi_model.renewal_step, init, Rt)

    return I_t
end
