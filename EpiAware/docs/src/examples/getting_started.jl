### A Pluto.jl notebook ###
# v0.19.40

using Markdown
using InteractiveUtils

# ╔═╡ c593a2a0-d7f5-11ee-0931-d9f65ae84a72
# hideall
let
    docs_dir = dirname(dirname(@__DIR__))
    pkg_dir = dirname(docs_dir)

    using Pkg: Pkg
    Pkg.activate(docs_dir)
    Pkg.develop(; path = pkg_dir)
    Pkg.instantiate()
end;

# ╔═╡ da479d8d-1312-4b98-b0af-5be52dffaf3f
begin
    using EpiAware
    using Turing
    using Distributions
    using StatsPlots
    using Random
    using DynamicPPL
    using Statistics
    using DataFramesMeta
end

# ╔═╡ 3ebc8384-f73d-4597-83a7-07a3744fed61
md"
# Getting stated with `EpiAware`

This tutorial introduces the basic functionality of `EpiAware`. `EpiAware` is a package for making inferences on epidemiological case/determined infection data using a model-based approach.

## `EpiAware` models
The models we consider are discrete-time $t = 1,\dots, T$ with a latent random process, $Z_t$ generating stochasticity in the number of new infections $I_t$ at each time step. Observations are treated as downstream random variables determined by the actual infections and a model of infection to observation delay.

#### Mathematical definition
```math
\begin{align}
Z_\cdot &\sim \mathcal{P}(\mathbb{R}^T) | \theta_Z, \\
I_0 &\sim f_0(\theta_I), \\
I_t &\sim g_I(\{I_s, Z_s\}_{s < t}, \theta_{I}), \\
y_t &\sim f_O(\{I_s\}_{s \leq t}, \theta_{O}).
\end{align}
```
Where, $\mathcal{P}(\mathbb{R}^T) | \theta_Z$ is a parametric process on $\mathbb{R}^T$. $f_0$ and $f_O$ are parametric distributions on, respectively, the initial number of infections and the observed case data conditional on underlying infections. $g_I$ is distribution of new infections conditional on infections and latent process in the past. Note that we assume that new infections are conditional on the strict past, whereas new observations can depend on infections on the same time step.

#### Code structure outline

An `EpiAware` model in code is created from three modular components:

- A `LatentModel`: This defines the model for $Z_\cdot$. This chooses $\mathcal{P}(\mathbb{R}^T) | \theta_Z$.
- An `EpiModel`: This defines a generative process for infections conditional on the latent process. This chooses $f_0(\theta_I)$, and $g_I(\{I_s, Z_s\}_{s < t}, \theta_{I})$.
- An `ObservationModel`: This defines the observation model. This chooses $f_O({I_s}_{s \leq t}, \theta_{O})$

#### Reproductive number
`EpiAware` models do not need to specify a time-varying reproductive number $\mathcal{R}_t$ to generate $I_\cdot$, however, this is often a quantity of interest. When not directly used we will typically back-calculate $\mathcal{R}_t$ from the generated infections:

```math
\mathcal{R}_t = {I_t \over \sum_{s \geq 1} g_s I_{t-s} }.
```

Where $g_s$ is a discrete generation interval. For this reason, even when not using a reproductive number approach directly, we ask for a generation interval.
"

# ╔═╡ 5a0d5ab8-e985-4126-a1ac-58fe08beee38
md"
## Random walk `LatentModel`

As an example, we choose the latent process as a random walk with parameters $\theta_Z$:

- ``Z_0``: Initial position.
- ``\sigma^2_{Z}``: The step-size variance.

Conditional on the parameters the random walk is then generated by white noise:
```math
\begin{align}
Z_t &= Z_0 + \sigma_{RW} \sum_{t= 1}^T \epsilon_t, \\
\epsilon_t &\sim \mathcal{N}(0,1).
\end{align}
```

In `EpiAware` we provide a constructor for random walk latent models with priors for $\theta_Z$. We choose priors,
```math
\begin{align}
Z_0 &\sim \mathcal{N}(0,1),\\
\sigma^2_Z &\sim \text{HalfNormal}(0.01).
\end{align}
```
"

# ╔═╡ 56ae496b-0094-460b-89cb-526627991717
rwp = EpiAware.RandomWalk(Normal(),
    truncated(Normal(0.0, 0.01), 0.0, 0.5))

# ╔═╡ 767beffd-1ef5-4e6c-9ac6-edb52e60fb44
md"
## Direct infection `EpiModel`

This is a simple model where the unobserved log-infections are directly generated by the latent process $Z$.
```math
\log I_t = \log I_0 + Z_t.
```

As discussed above, we still ask for a defined generation interval, which can be used to calculate $\mathcal{R}_t$.

"

# ╔═╡ 9e43cbe3-94de-44fc-a788-b9c7adb34218
truth_GI = Gamma(2, 5)

# ╔═╡ f067284f-a1a6-44a6-9b79-f8c2de447673
md"
The `EpiData` constructor performs double interval censoring to convert our _continuous_ estimate of the generation interval into a discretized version. We also implement right truncation using the keyword `D_gen`.
"

# ╔═╡ c0662d48-4b54-4b6d-8c91-ddf4b0e3aa43
model_data = EpiData(truth_GI,
    D_gen = 10.0)

# ╔═╡ fd72094f-1b95-4d07-a8b0-ef47dc560dfc
md"
We can supply a prior for the initial log_infections.
"

# ╔═╡ 6639e66f-7725-4976-81b2-6472419d1a62
log_I0_prior = Normal(log(100.0), 1.0)

# ╔═╡ df5e59f8-3185-4bed-9cca-7c266df17cec
md"
And construct the `EpiModel`.
"

# ╔═╡ 6fbdd8e6-2323-4352-9185-1f31a9cf9012
epi_model = DirectInfections(model_data, log_I0_prior)

# ╔═╡ 5e62a50a-71f4-4902-b1c9-fdf51fe145fa
md"


### Observation model

The observation model is a negative binomial distribution with mean `μ` and cluster factor `r`. Delays are implemented
as the action of a sparse kernel on the infections $I(t)$. The delay kernel is contained in an `EpiModel` struct.

```math
\begin{align}
y_t &\sim \text{NegBinomial}(\mu = \sum_s\geq 0 K[t, t-s] I(s), r),
r &\sim \text{Gamma}(3, 0.05/3).
\end{align}
```
"

# ╔═╡ c7580ae6-0db5-448e-8b20-4dd6fcdb1ae0
time_horizon = 100

# ╔═╡ 448669bc-99f4-4823-b15e-fcc9040ba31b
obs_model = EpiAware.DelayObservations([1.0],
    time_horizon,
    truncated(Gamma(5, 0.05 / 5), 1e-3, 1.0))

# ╔═╡ e49713e8-4840-4083-8e3f-fc52d791be7b
md"
## Generation
"

# ╔═╡ abeff860-58c3-4644-9325-66ffd4446b6d
full_epi_aware_mdl = make_epi_aware(missing, time_horizon; epi_model = epi_model,
    latent_model_model = rwp, observation_model = obs_model,
    pos_shift = 1e-6)

# ╔═╡ 36b34fd2-2891-42ca-b5dc-abb482e516ee
fixed_parameters = (init_incidence = log(100.0), σ²_RW = 0.1^2, init_rw = 0.0)

# ╔═╡ 7e0e6012-8648-4f84-a25a-8b0138c4b72a
cond_toy = fix(full_epi_aware_mdl, fixed_parameters)

# ╔═╡ b20c28be-7b07-410c-a33b-ea5ad6828c12
random_epidemic = rand(cond_toy)

# ╔═╡ d073e63b-62da-4743-ace0-78ef7806bc0b
gen = generated_quantities(cond_toy, random_epidemic)

# ╔═╡ f68b4e41-ac5c-42cd-a8c2-8761d66f7543
let
    plot(gen.I_t,
        label = "I_t",
        xlabel = "Time",
        ylabel = "Infections",
        title = "Generated Infections")
    scatter!(random_epidemic.y_t, lab = "generated cases")
end

# ╔═╡ b5bc8f05-b538-4abf-aa84-450bf2dff3d9
md"
## Inference
"

# ╔═╡ c8ce0d46-a160-4c40-a055-69b3d10d1770
truth_data = random_epidemic.y_t

# ╔═╡ b4033728-b321-4100-8194-1fd9fe2d268d
inference_mdl = fix(
    make_epi_aware(truth_data, time_horizon; epi_model = epi_model,
        latent_model_model = rwp, observation_model = obs_model,
        pos_shift = 1e-6),
    (init_rw = 0.0,))

# ╔═╡ 3eb5ec5e-aae7-478e-84fb-80f2e9f85b4c
chn = sample(inference_mdl,
    NUTS(; adtype = AutoReverseDiff(true)),
    MCMCThreads(),
    500,
    2;
    n_warmup = 100,
    drop_warmup = true)

# ╔═╡ e9df22b8-8e4d-4ab7-91ea-c01f2239b3e5
let
    post_check_mdl = fix(full_epi_aware_mdl, (init_rw = 0.0,))
    post_check_y_t = mapreduce(hcat, generated_quantities(full_epi_aware_mdl, chn)) do gen
        gen.generated_y_t
    end

    predicted_I_t = mapreduce(hcat, generated_quantities(inference_mdl, chn)) do gen
        gen.I_t
    end

    p1 = plot(post_check_y_t, c = :grey, alpha = 0.05, lab = "")
    scatter!(p1, truth_data,
        lab = "Observed cases",
        xlabel = "Time",
        ylabel = "Cases",
        title = "Post. predictive checking: cases",
        ylims = (-0.5, maximum(truth_data) * 2.5),
        c = :green)

    p2 = plot(predicted_I_t, c = :grey, alpha = 0.05, lab = "")
    scatter!(p2, gen.I_t,
        lab = "Actual infections",
        xlabel = "Time",
        ylabel = "Unobserved Infections",
        title = "Post. predictions: infections",
        ylims = (-0.5, maximum(gen.I_t) * 1.5),
        c = :red)

    plot(p1, p2, layout = (2, 1))
end

# ╔═╡ 10d8fe24-83a6-47ac-97b7-a374481473d3
let
    var_samples = chn[:σ²_RW] |> vec
    histogram(var_samples, bins = 50, norm = :pdf)
    vline!([fixed_parameters.:σ²_RW])
    plot!(rwp.var_prior)
end

# ╔═╡ Cell order:
# ╟─c593a2a0-d7f5-11ee-0931-d9f65ae84a72
# ╟─3ebc8384-f73d-4597-83a7-07a3744fed61
# ╠═da479d8d-1312-4b98-b0af-5be52dffaf3f
# ╟─5a0d5ab8-e985-4126-a1ac-58fe08beee38
# ╠═56ae496b-0094-460b-89cb-526627991717
# ╟─767beffd-1ef5-4e6c-9ac6-edb52e60fb44
# ╠═9e43cbe3-94de-44fc-a788-b9c7adb34218
# ╟─f067284f-a1a6-44a6-9b79-f8c2de447673
# ╠═c0662d48-4b54-4b6d-8c91-ddf4b0e3aa43
# ╟─fd72094f-1b95-4d07-a8b0-ef47dc560dfc
# ╠═6639e66f-7725-4976-81b2-6472419d1a62
# ╟─df5e59f8-3185-4bed-9cca-7c266df17cec
# ╠═6fbdd8e6-2323-4352-9185-1f31a9cf9012
# ╠═5e62a50a-71f4-4902-b1c9-fdf51fe145fa
# ╠═c7580ae6-0db5-448e-8b20-4dd6fcdb1ae0
# ╠═448669bc-99f4-4823-b15e-fcc9040ba31b
# ╟─e49713e8-4840-4083-8e3f-fc52d791be7b
# ╠═abeff860-58c3-4644-9325-66ffd4446b6d
# ╠═36b34fd2-2891-42ca-b5dc-abb482e516ee
# ╠═7e0e6012-8648-4f84-a25a-8b0138c4b72a
# ╠═b20c28be-7b07-410c-a33b-ea5ad6828c12
# ╠═d073e63b-62da-4743-ace0-78ef7806bc0b
# ╟─f68b4e41-ac5c-42cd-a8c2-8761d66f7543
# ╟─b5bc8f05-b538-4abf-aa84-450bf2dff3d9
# ╠═c8ce0d46-a160-4c40-a055-69b3d10d1770
# ╠═b4033728-b321-4100-8194-1fd9fe2d268d
# ╠═3eb5ec5e-aae7-478e-84fb-80f2e9f85b4c
# ╠═e9df22b8-8e4d-4ab7-91ea-c01f2239b3e5
# ╠═10d8fe24-83a6-47ac-97b7-a374481473d3
