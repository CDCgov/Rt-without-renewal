"""
Extracts and returns relevant information from the given inference configuration dictionary.

# Returns
- `NamedTuple`: A named tuple containing the following fields:
  - `igp_model::String`: The IGP model name extracted from the configuration.
  - `latent_model::String`: The latent model name from the configuration.
  - `used_gi_mean::Float64`: The mean generation interval (GI) used in the configuration.
  - `used_gi_std::Float64`: The standard deviation of the generation interval (GI) used in the configuration.
  - `start_time::Int`: The start time parsed from the configuration's time span.
  - `reference_time::Int`: The reference time parsed from the configuration's time span.
  - `used_gi_means::Vector{Float64}`: A vector of GI means, either a single value if the IGP model is "Renewal" or a list of values generated by `make_gi_params` otherwise.
"""
function _get_info_from_config(inference_config)
    #Get the scenario, IGP model, latent model and true mean GI
    igp_model = inference_config["igp"] |> igp_name -> split(igp_name, ".")[end]
    latent_model = inference_config["latent_model"]
    used_gi_mean = inference_config["gi_mean"]
    used_gi_std = inference_config["gi_std"]
    (start_time, reference_time) = inference_config["tspan"] |>
                                   tspan -> split(tspan, "_") |>
                                            tspan -> (
        parse(Int, tspan[1]), parse(Int, tspan[2]))

    #Get the quantiles for the targets across the gi mean scenarios
    #if Renewal model, then we use the underlying epi model
    #otherwise we use the epi datas to loop over different gi mean implications
    used_gi_means = igp_model == "Renewal" ?
                    [used_gi_mean] :
                    make_gi_params(EpiAwareExamplePipeline())["gi_means"]
    return (; igp_model, latent_model, used_gi_mean, used_gi_std,
        start_time, reference_time, used_gi_means)
end
